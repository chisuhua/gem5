import os
import logging
import datetime
from operator import add
from functools import reduce

import pdb

Import('env')
Import('deps')

cosim_dir = env['COSIM_DIR']


#####################################
# scala to verilog
# def compile_verilog(env):
#####################################
def compile_scala(env, PROJECT, DESIGN):
    # Compile FIRRTL first
    def publish(target, source, env):
        with open(target[0].name, 'w') as _f:
            _f.write(str(datetime.datetime.now()))

    env.SBT('publish', [],
            SBT_CWD='firrtl',
            SBT_CMD='publishLocal',
            SBT_ACTIONS=[publish])
    env.Precious('publish')
    env.NoClean('publish')

    targets = env.SBT(
        [
            os.path.join(env['GEN_DIR'], DESIGN, DESIGN + '.v'),
            os.path.join(env['GEN_DIR'], DESIGN, DESIGN + '.macros.v'),
            os.path.join(env['GEN_DIR'], DESIGN, DESIGN + '-const.h'),
            os.path.join(env['GEN_DIR'], DESIGN, DESIGN + '-const.vh'),
            os.path.join(env['GEN_DIR'], DESIGN, 'defines.vh')
        ],
        ['publish'] + [
            os.path.abspath(os.path.join(cosim_dir, 'src', 'macro.45nm.json')),
            os.path.abspath(os.path.join(cosim_dir, 'src', 'model.tsmc45.csv')),
            os.path.abspath(os.path.join(cosim_dir, 'src', 'cad-opt.txt'))
        ],
        SBT_CMD='"%s"' % ' '.join([
            "runMain",
            'dessert.examples.Generator',
            os.path.join(env['GEN_DIR'], DESIGN),
            PROJECT,
            DESIGN,
            '+macro=%s' % os.path.join(cosim_dir, "src", "macro.45nm.json")
        ]))


#            'dessert.rocketchip.Generator',
#            'midas',
#            env['PLATFORM'],
#            env['GEN_DIR'],
#            'dessert.rocketchip',
#            'HwachaTop',
#            'dessert.rocketchip',
#            'ExampleHwachaConfig',
#            '+svf=%s' % os.path.abspath("cad-opt.txt"),
#            '+macro=%s' % os.path.abspath("macro.45nm.json"),
#            '+model=%s' % os.path.abspath("model.tsmc45.csv")]))
    env.Precious(targets)
    env.Alias('rtl-v', targets)
    env.SideEffect('#sbt', targets)
    env.Default('rtl-v')

    return [t.abspath for t in targets]


######################
#  sbt action
######################
def _get_submodule_files(submodule):
    return reduce(add, [
        [
            os.path.join(dirpath, f)
            for f in filenames if f.endswith('.scala')
        ]
        for dirpath, _, filenames in os.walk(os.path.join(
            submodule, 'src', 'main', 'scala'))
    ], [])

def _get_submodule_test_files(submodule):
    return reduce(add, [
        [
            os.path.join(dirpath, f)
            for f in filenames if f.endswith('.scala')
        ]
        for dirpath, _, filenames in os.walk(os.path.join(
            submodule, 'src', 'test', 'scala'))
    ], [])



def _scala_srcs(target, source, env):
    if target[0].name == 'publish':
        return target, source + _get_submodule_files(os.path.join(cosim_dir, 'firrtl'))

    extra_srcs = ['publish']

    submodules = [
        os.path.curdir,
        os.path.join(cosim_dir, 'src', 'chisel_design', 'example'),
        os.path.join(cosim_dir, 'src', 'chisel_design', 'riscv-mini')
#        os.path.join('designs', 'rocket-chip'),
#        os.path.join('designs', 'testchipip'),
#        os.path.join('designs', 'sifive-blocks'),
#        os.path.join('designs', 'hwacha')
    ]

    return target, source + ['publish'] + reduce(add, [
        _get_submodule_files(submodule) for submodule in submodules ], [])
#+ reduce(add, [_get_submodule_test_files(submodule) for submodule in submodules ], [])



def _sbt_actions(target, source, env, for_signature):
    return [' '.join(
        (['cd', env['SBT_CWD'], '&&'] if 'SBT_CWD' in env else []) + \
        [env['SBT'], env['SBT_FLAGS'], env['SBT_CMD']]
    )] + (env['SBT_ACTIONS'] if 'SBT_ACTIONS' in env else [])


# orignal verilator option, looks not used
#            '-CFLAGS', '\"-include %s\"' % (os.path.join(
#                env['CSRC_DIR'], 'V' + env['VERILATOR_TOP'] + '.h')),
#            '-CFLAGS', '\"%s\"' % (' '.join(env['CXXFLAGS'])),
#            '-o', target[0].abspath


######################
### Verilator
######################
def _verilator_actions(target, source, env, for_signature):
    return [
        Delete(env['CSRC_DIR']),
        ' '.join([
            env['VENV']
        ] + [
            env['VERILATOR']
        ] + env['VERILATOR_FLAGS'] + [
            '--top-module', env['VERILATOR_TOP'],
            '-Mdir', env['CSRC_DIR'],
            '-I' + env['VSRC_DIR'],
            '-Wno-fatal --pins-bv 2 -sc '
        ] + [ str(s.abspath) for  s in source]
        ),
        ' '.join([
            'make',
            '-C', env['CSRC_DIR'],
            '-f', 'V%s.mk' % env['VERILATOR_TOP']
        ]),
        ' '.join([
            'make',
            '-C', env['CSRC_DIR'],
            '-f', 'V%s.mk verilated.o' % env['VERILATOR_TOP']
        ])

    ]


def compile_verilator(env, gen_dir, out_dir, srcs, binary, cmd):
    csrc_dir = os.path.join(gen_dir, binary + '.csrc')
    vsrc_dir = os.path.dirname(srcs[0].abspath)
    #binary_path = os.path.join(out_dir, binary + '.vo')
    verilated_o = os.path.join(csrc_dir, 'verilated.o')
    verilated_header = os.path.join(csrc_dir, 'V' + env['VERILATOR_TOP'] + '.h')
    verilated_obj = os.path.join(csrc_dir, 'V' + env['VERILATOR_TOP'] + '__ALL.a')
    env.Verilator([verilated_o, verilated_obj, verilated_header], srcs, CSRC_DIR=csrc_dir, VSRC_DIR=vsrc_dir)
    #env.Alias(cmd, binary_path)
    #env.Clean(cmd, csrc_dir)
    return [verilated_o, verilated_obj, verilated_header]

######################
### compiler verilog by verilator
### (modify form compiler_emul)
######################

def compile_design(env, vfiles, verilator_top, design, VFLAGS = ""):

    env['VERILATOR_TOP'] = verilator_top
    env['DESIGN'] = design
    env['VENV'] = "SYSTEMC_INCLUDE=" + env['SYSTEMC_INCLUDE'] + " SYSTEMC_LIBDIR=" + env['SYSTEMC_LIBDIR']
    env['VERILATOR_ROOT']=os.popen('verilator --getenv VERILATOR_ROOT').readline().strip()
    env['VERILATOR_FLAGS'].append(VFLAGS)

    def _compile(env, suffix=''):
        return compile_verilator(
            env,
            env['GEN_DIR'],
            env['OUT_DIR'],
            vfiles,
            'V' + env['DESIGN'] + suffix,
            'verilator' + suffix)

    return _compile(env)
    #_compile(env.Clone(
    #    VERILATOR_FLAGS=env['VERILATOR_FLAGS'] + ['--trace'],
    #), '-debug')


variables = Variables(None, ARGUMENTS)
variables.AddVariables(
    EnumVariable('EMUL', 'Program for emulation, RTL/gate-level simulation',
                 'verilator', allowed_values=['vcs', 'verilator']))

gem5_root = env['GEM5_ROOT']

env.Append(
    variables=variables,
    ENV=os.environ,
    SBT='sbt',
    SBT_FLAGS=' '.join([
        '-ivy', os.path.join(os.path.abspath(os.path.curdir), '.ivy2'),
        '-J-Xmx16G',
        '-J-Xss8M',
        '-J-XX:MaxMetaspaceSize=512M',
        '++2.12.11'
    ]),
    VERILATOR='verilator --cc',
    VERILATOR_FLAGS=[],
    GEN_DIR=os.path.abspath('generated-src'),
    OUT_DIR=os.path.abspath('output')
    )


env.Append(
    BUILDERS={
        'Verilator': Builder(generator=_verilator_actions),
        'SBT': Builder(generator=_sbt_actions, emitter=_scala_srcs)
})

env.Append(CPPPATH=[gem5_root + '/ext/libsystemctlm-soc',
                    gem5_root + '/ext/libsystemctlm-soc/tests'
                   ])

design = []
co_design = os.environ.get('CO_DESIGN')
design.append(SConscript(co_design + '/SConscript',
                        variant_dir=env['OUT_DIR'] + '/' + co_design,
                        exports=['env', 'deps', 'compile_design', 'compile_scala'])
             )



Return('design')
