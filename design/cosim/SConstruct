#!python
#
# Authors: Chi Suhua

import os
import sys
import pdb

gem5_arch = 'X86_VI_hammer'

#gem5_variant = 'opt'
gem5_variant = 'debug'

gem5_root = Dir('#../..').srcnode().abspath
gem5_tlm = gem5_root + '/util/tlm'

env = Environment()

#Make the gem5 root available in SConscripts
env['GEM5_ROOT'] = gem5_root

shlibsuffix = env['SHLIBSUFFIX']

# add include dirs
env.Append(CPPPATH=[gem5_root + '/build/' + gem5_arch,
                    gem5_root + '/util/systemc/gem5_within_systemc',
                    gem5_root + '/ext/systemc/src',
                    gem5_root + '/ext/libsystemctlm-soc',
                    gem5_tlm + '/src',
                    gem5_tlm + '/examples/common',
                    ])

env.Append(CXXFLAGS=['-std=c++14',
                     '-DSC_INCLUDE_DYNAMIC_PROCESSES',
                     '-DTRACING_ON',
                     ])

if gem5_variant == 'debug':
    env.Append(CXXFLAGS=['-g', '-DDEBUG'])

deps = [] # keep track of all dependencies required for building the binaries


deps += SConscript(gem5_tlm + '/src/SConscript', variant_dir='build/tlm', exports='env')


deps += SConscript(gem5_tlm + '/examples/common/SConscript',
                   variant_dir='build/examples/common',
                   exports=['env'])

# the SystemC SConscript makes certain assumptions, we need to fulfill these
# assumptions before calling the SConscript.
main = env
sys.path.append(gem5_root + '/src/python')
AddOption('--no-colors', dest='use_colors', action='store_false',
          help="Don't add color to abbreviated scons output")

SConscript(gem5_root + '/ext/systemc/SConscript',
           variant_dir='build/systemc',
           exports='main')

# By adding libraries as dependencies instead of using LIBS, we avoid that
# the user needs to set the LD_LIBRARY_PATH
deps.append(File('build/systemc/libsystemc' + shlibsuffix))
deps.append(File(os.path.join(gem5_root, 'build', gem5_arch,
             'libgem5_' + gem5_variant + shlibsuffix)))

ex_master = SConscript('examples/master_port/SConscript',
                       variant_dir='build/examples/master_port',
                       exports=['env', 'deps'])

ex_slave = SConscript('examples/slave_port/SConscript',
                      variant_dir='build/examples/slave_port',
                      exports=['env', 'deps'])


env['SYSTEMC_INCLUDE'] = gem5_root + '/ext/systemc/src'
env['SYSTEMC_LIBDIR'] = gem5_tlm + '/build/systemc'





num_cpus = 0
with open('/proc/cpuinfo', 'r') as _f:
    for line in _f:
        if line[:9] == 'processor':
            num_cpus += 1
print("# of processors: %d" % num_cpus)

if GetOption('num_jobs') < 8:
    SetOption('num_jobs', max(num_cpus-4, 8))
print("# of job: %d" % GetOption('num_jobs'))


#verilog, const_h, const_vh, defines = compile_verilog(env)
#pdb.set_trace()

design = SConscript(
    'src/SConscript',
    variant_dir='build',
    exports=[ 'env', 'deps'
    ])

Default(ex_master + ex_slave + design)
