# -*- mode:python -*-

# Copyright (c) 2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Steve Reinhardt

Import('*')


DebugFlag('PpuActivity')
DebugFlag('PpuCommit')
DebugFlag('PpuContext')
DebugFlag('PpuDecode')
DebugFlag('PpuDynInst')
DebugFlag('PpuExecEnable',
        'Filter: Enable exec tracing (no tracing without this)')
DebugFlag('PpuExecCPSeq', 'Format: Instruction sequence number')
DebugFlag('PpuExecEffAddr', 'Format: Include effective address')
DebugFlag('PpuExecFaulting', 'Trace faulting instructions')
DebugFlag('PpuExecFetchSeq', 'Format: Fetch sequence number')
DebugFlag('PpuExecOpClass', 'Format: Include operand class')
DebugFlag('PpuExecRegDelta')
DebugFlag('PpuExecResult', 'Format: Include results from execution')
DebugFlag('PpuExecSymbol', 'Format: Try to include symbol names')
DebugFlag('PpuExecThread', 'Format: Include thread ID in trace')
DebugFlag('PpuExecMicro', 'Filter: Include microops')
DebugFlag('PpuExecMacro', 'Filter: Include macroops')
DebugFlag('PpuExecUser', 'Filter: Trace user mode instructions')
DebugFlag('PpuExecKernel', 'Filter: Trace kernel mode instructions')
DebugFlag('PpuExecAsid', 'Format: Include ASID in trace')
DebugFlag('PpuExecFlags', 'Format: Include instruction flags in trace')
DebugFlag('PpuFetch')
DebugFlag('PpuIntrControl')
DebugFlag('PpuO3PipeView')
DebugFlag('PpuPCEvent')
DebugFlag('PpuQuiesce')
DebugFlag('PpuMwait')

CompoundFlag('PpuExecAll', [ 'PpuExecEnable', 'PpuExecCPSeq', 'PpuExecEffAddr',
    'PpuExecFaulting', 'PpuExecFetchSeq', 'PpuExecOpClass', 'PpuExecRegDelta',
    'PpuExecResult', 'PpuExecSymbol', 'PpuExecThread',
    'PpuExecMicro', 'PpuExecMacro', 'PpuExecUser', 'PpuExecKernel',
    'PpuExecAsid', 'PpuExecFlags' ])
CompoundFlag('PpuExec', [ 'PpuExecEnable', 'PpuExecOpClass', 'PpuExecThread',
    'PpuExecEffAddr', 'PpuExecResult', 'PpuExecSymbol', 'PpuExecMicro', 'PpuExecMacro',
    'PpuExecFaulting', 'PpuExecUser', 'PpuExecKernel' ])
CompoundFlag('PpuExecNoTicks', [ 'PpuExec', 'FmtTicksOff' ])



Source('static_inst.cc', append={'CXXFLAGS': '-DBUILD_PPU'})


Source('pc_event.cc', append={'CXXFLAGS': '-DBUILD_PPU'})

if env['TARGET_ISA'] == 'null':
    SimObject('IntrControl.py')
    Source('intr_control_noisa.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
    Return()

# Only build the protocol buffer instructions tracer if we have protobuf support
if env['HAVE_PROTOBUF'] and env['TARGET_ISA'] != 'x86':
    SimObject('InstPBTrace.py')
    Source('inst_pb_trace.cc', append={'CXXFLAGS': '-DBUILD_PPU'})

SimObject('PpuBaseCPU.py')
SimObject('PpuCheckerCPU.py')
#
#SimObject('CPUTracers.py')
#SimObject('FuncUnit.py')
#SimObject('IntrControl.py')
#SimObject('TimingExpr.py')

#Source('activity.cc', append={'CXXFLAGS': '-DBUILD_PPU'} )
Source('base.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('cpuevent.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('exetrace.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('exec_context.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('func_unit.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('inteltrace.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('intr_control.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('nativetrace.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('profile.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('quiesce_event.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('reg_class.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('static_inst.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('simple_thread.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('thread_context.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('thread_state.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('timing_expr.cc', append={'CXXFLAGS': '-DBUILD_PPU'})

#SimObject('DummyChecker.py')
#SimObject('StaticInstFlags.py')
Source('checker/cpu.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
#Source('dummy_checker.cc')
DebugFlag('PpuChecker')
Return()
