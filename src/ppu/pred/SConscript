# -*- mode:python -*-

# Copyright (c) 2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Steve Reinhardt

Import('*')

DebugFlag('PpuFreeList')
DebugFlag('PpuBranch')
DebugFlag('PpuTage')
DebugFlag('PpuLTage')
DebugFlag('PpuTageSCL')


if env['TARGET_ISA'] == 'null':
    Return()

SimObject('PpuBranchPredictor.py')

DebugFlag('PpuIndirect')
Source('bpred_unit.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('ras.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('indirect.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('simple_indirect.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('tournament.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('btb.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Return()

Source('2bit_local.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source ('bi_mode.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('tage_base.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('tage.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('loop_predictor.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('ltage.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('multiperspective_perceptron.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('multiperspective_perceptron_8KB.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('multiperspective_perceptron_64KB.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('multiperspective_perceptron_tage.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('multiperspective_perceptron_tage_8KB.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('multiperspective_perceptron_tage_64KB.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('statistical_corrector.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('tage_sc_l.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('tage_sc_l_8KB.cc', append={'CXXFLAGS': '-DBUILD_PPU'})
Source('tage_sc_l_64KB.cc', append={'CXXFLAGS': '-DBUILD_PPU'})

